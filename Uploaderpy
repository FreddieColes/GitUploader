import os
import base64
import tkinter as tk
from tkinter import filedialog, simpledialog, messagebox
from github import Github, GithubException
import traceback
import re

def select_folder():
    root = tk.Tk()
    root.withdraw()
    folder_path = filedialog.askdirectory(title="Select folder to upload")
    return folder_path

def get_github_token():
    root = tk.Tk()
    root.withdraw()
    token = simpledialog.askstring("GitHub Token", "Enter your GitHub token:", show='*')
    return token

def show_error(message):
    root = tk.Tk()
    root.withdraw()
    messagebox.showerror("Error", message)

def sanitize_path(path):
    # Remove any leading slashes or dots
    path = path.lstrip('./\\')
    # Replace spaces with underscores
    path = path.replace(' ', '_')
    # Remove any characters that aren't alphanumeric, underscore, hyphen, or forward slash
    path = re.sub(r'[^\w\-/]', '', path)
    # Replace multiple forward slashes with a single one
    path = re.sub(r'/+', '/', path)
    return path

def upload_to_github(folder_path, github_token):
    try:
        # Authenticate with GitHub
        g = Github(github_token)
        user = g.get_user()

        # Get the folder name
        folder_name = os.path.basename(folder_path)

        # Check if a repo with a similar name exists
        try:
            repo = user.get_repo(folder_name)
            print(f"Repository '{folder_name}' already exists. Uploading to existing repo.")
        except GithubException:
            print(f"Creating new repository '{folder_name}'")
            repo = user.create_repo(folder_name)

        # Upload files
        for root, dirs, files in os.walk(folder_path):
            for file in files:
                file_path = os.path.join(root, file)
                with open(file_path, 'rb') as file_content:
                    content = file_content.read()
                
                # Create relative path for GitHub and sanitize it
                github_file_path = os.path.relpath(file_path, folder_path).replace('\\', '/')
                github_file_path = sanitize_path(github_file_path)
                
                try:
                    # Try to get the file to see if it exists
                    contents = repo.get_contents(github_file_path)
                    repo.update_file(github_file_path, f"Update {github_file_path}", content, contents.sha)
                    print(f"Updated {github_file_path}")
                except GithubException as e:
                    if e.status == 404:  # File doesn't exist
                        repo.create_file(github_file_path, f"Add {github_file_path}", content)
                        print(f"Created {github_file_path}")
                    else:
                        print(f"Error processing {github_file_path}: {str(e)}")
                except Exception as e:
                    print(f"Unexpected error processing {github_file_path}: {str(e)}")

        print(f"Folder '{folder_name}' has been successfully uploaded to GitHub.")

    except Exception as e:
        error_message = f"An error occurred: {str(e)}\n\nTraceback:\n{traceback.format_exc()}"
        print(error_message)
        show_error(error_message)

if __name__ == "__main__":
    folder_path = select_folder()
    if not folder_path:
        print("No folder selected. Exiting.")
        exit(1)

    github_token = get_github_token()
    if not github_token:
        print("No GitHub token provided. Exiting.")
        exit(1)

    upload_to_github(folder_path, github_token)