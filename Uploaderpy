import os
import base64
import tkinter as tk
from tkinter import filedialog, simpledialog, messagebox, ttk
from github import Github, GithubException
import traceback
import re
import threading

class GitHubUploaderApp:
    def __init__(self, master):
        self.master = master
        master.title("GitHub Folder Uploader")
        master.geometry("1000x400")  # Doubled the width

        self.folder_path = tk.StringVar()
        self.github_token = tk.StringVar()
        self.repo_description = tk.StringVar()
        self.commit_message = tk.StringVar()

        self.create_widgets()

    def create_widgets(self):
        # Folder selection
        tk.Label(self.master, text="Folder to upload:").grid(row=0, column=0, sticky="w", padx=10, pady=5)
        tk.Entry(self.master, textvariable=self.folder_path, width=100).grid(row=0, column=1, padx=10, pady=5)
        tk.Button(self.master, text="Browse", command=self.select_folder).grid(row=0, column=2, padx=10, pady=5)

        # GitHub token
        tk.Label(self.master, text="GitHub Token:").grid(row=1, column=0, sticky="w", padx=10, pady=5)
        tk.Entry(self.master, textvariable=self.github_token, show="*", width=100).grid(row=1, column=1, columnspan=2, padx=10, pady=5)

        # Repository description
        tk.Label(self.master, text="Repository Description:").grid(row=2, column=0, sticky="w", padx=10, pady=5)
        tk.Entry(self.master, textvariable=self.repo_description, width=100).grid(row=2, column=1, columnspan=2, padx=10, pady=5)

        # Commit message
        tk.Label(self.master, text="Commit Message:").grid(row=3, column=0, sticky="w", padx=10, pady=5)
        tk.Entry(self.master, textvariable=self.commit_message, width=100).grid(row=3, column=1, columnspan=2, padx=10, pady=5)

        # Upload button
        tk.Button(self.master, text="Upload to GitHub", command=self.start_upload).grid(row=4, column=0, columnspan=3, pady=20)

        # Progress bar
        self.progress = ttk.Progressbar(self.master, length=900, mode='indeterminate')
        self.progress.grid(row=5, column=0, columnspan=3, padx=10, pady=5)

        # Status message
        self.status_message = tk.StringVar()
        tk.Label(self.master, textvariable=self.status_message, wraplength=980).grid(row=6, column=0, columnspan=3, padx=10, pady=5)

    def select_folder(self):
        folder_path = filedialog.askdirectory(title="Select folder to upload")
        self.folder_path.set(folder_path)

    def start_upload(self):
        if not self.folder_path.get() or not self.github_token.get():
            messagebox.showerror("Error", "Please provide both folder path and GitHub token.")
            return

        self.progress.start()
        self.status_message.set("Uploading...")
        threading.Thread(target=self.upload_to_github, daemon=True).start()

    def sanitize_path(self, path):
        path = path.lstrip('./\\')
        path = path.replace(' ', '_')
        path = re.sub(r'[^\w\-/]', '', path)
        path = re.sub(r'/+', '/', path)
        return path

    def upload_to_github(self):
        try:
            g = Github(self.github_token.get())
            user = g.get_user()

            folder_name = os.path.basename(self.folder_path.get())

            try:
                repo = user.get_repo(folder_name)
                self.status_message.set(f"Repository '{folder_name}' already exists. Uploading to existing repo.")
            except GithubException:
                self.status_message.set(f"Creating new repository '{folder_name}'")
                repo = user.create_repo(folder_name, description=self.repo_description.get())

            for root, dirs, files in os.walk(self.folder_path.get()):
                for file in files:
                    file_path = os.path.join(root, file)
                    with open(file_path, 'rb') as file_content:
                        content = file_content.read()
                    
                    github_file_path = os.path.relpath(file_path, self.folder_path.get()).replace('\\', '/')
                    github_file_path = self.sanitize_path(github_file_path)
                    
                    try:
                        contents = repo.get_contents(github_file_path)
                        repo.update_file(github_file_path, self.commit_message.get(), content, contents.sha)
                        self.status_message.set(f"Updated {github_file_path}")
                    except GithubException as e:
                        if e.status == 404:
                            repo.create_file(github_file_path, self.commit_message.get(), content)
                            self.status_message.set(f"Created {github_file_path}")
                        else:
                            self.status_message.set(f"Error processing {github_file_path}: {str(e)}")
                    except Exception as e:
                        self.status_message.set(f"Unexpected error processing {github_file_path}: {str(e)}")

            self.status_message.set(f"Folder '{folder_name}' has been successfully uploaded to GitHub.")
        except Exception as e:
            error_message = f"An error occurred: {str(e)}\n\nTraceback:\n{traceback.format_exc()}"
            self.status_message.set(error_message)
            messagebox.showerror("Error", error_message)
        finally:
            self.progress.stop()

if __name__ == "__main__":
    root = tk.Tk()
    app = GitHubUploaderApp(root)
    root.mainloop()